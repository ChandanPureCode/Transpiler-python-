"""The visitor for the AST"""


from typing import Optional

from antlr4 import ParseTreeVisitor

from ..dsl import DSL
from ..layer import Layer
from ..component import Component
from ..identifier import Identifier
from ..prop_reference import PropReference

from ..errors import IdentifierNotFoundError

from .lib.PCParser import PCParser


class Visitor(ParseTreeVisitor):
    """The visitor for the AST"""

    def __init__(self, tree: PCParser.DslContext) -> None:
        """Initialise a Visitor object

        Args:
            tree (PCParser.DslContext): DSL context tree to visit
        """
        super().__init__()
        self._dsl: Optional[DSL] = None
        self._tree: PCParser.DslContext = tree
        self._active_component: Component = None
        self._active_component_context: PCParser.ComponentContext = None

    @property
    def dsl(self) -> Optional[DSL]:
        """
        The DSL generated by walking the context tree

        Returns:
            DSL: The DSL generated by walking the context tree
        """
        return self._dsl

    def walk(self) -> None:
        """Walks the DSL context tree and generates a DSL object"""
        self.__visit_DSL(self._tree)

    # pylint: disable=[invalid-name]
    def __visit_DSL(self, context: PCParser.DslContext) -> None:
        # Create a DSL
        self._dsl = DSL()
        # Walk the components
        components: list[PCParser.ComponentContext] = context.component()
        for component in components:
            self.__visit_Component(context=component)

    # pylint: disable=[invalid-name]
    def __visit_Component(self, context: PCParser.ComponentContext) -> None:
        # Create a Component using the name
        name = str(context.IDENTIFIER()[0])
        component = Component(name=name)
        # Attach the component to the DSL
        self._dsl.add_component(component=component)
        # Set active component
        self._active_component = component
        self._active_component_context = context

        # Attach the props
        propnames = [str(prop) for prop in context.IDENTIFIER()][1:]
        for propname in propnames:
            component.add_prop(identifier=Identifier(propname))
        # Walk the layers
        # Get all the layers
        layers: list[PCParser.LayerContext] = context.layer()
        # Filter out root layers
        root_layers: list[PCParser.LayerContext] = [
            layer for layer in layers if layer.ROOT() is not None
        ]
        for layer in root_layers:
            self.__visit_Layer(context=layer)

    # pylint: disable=[invalid-name]
    def __visit_Layer(self, context: PCParser.LayerContext) -> None:
        # Create a layer using the id
        name = str(context.IDENTIFIER())
        layer = Layer(name=name)
        # Attach the layer to the Component
        self._active_component.add_layer(layer=layer)

        # Check if the layer is a root layer
        layer.is_root = False
        if context.ROOT() is not None:
            layer.is_root = True

        # Attach the import name and library
        type_context: PCParser.TypeContext = context.type_()
        layer.import_name = Identifier(str(type_context.IDENTIFIER()))
        layer.import_library = str(type_context.STRING()).strip('"')

        # Attach the props
        self.__visit_Props(layer, context.props())

        # Attach the parent layer
        if not layer.is_root:
            parent_context: PCParser.ParentLayerContext = context.parentLayer()
            parent_layer_identifier: str = str(parent_context.IDENTIFIER())
            if parent_layer_identifier != "null":
                layer.parent = Identifier(parent_layer_identifier)

        # Visit the children
        children_context: PCParser.ChildLayersContext = context.childLayers()
        self.__visit_Children(layer=layer, context=children_context)

    # pylint: disable=[invalid-name]
    def __visit_Children(
        self, layer: Layer, context: PCParser.ChildLayersContext
    ) -> None:
        string_child_nodes = [str(child) for child in context.STRING()]
        identifier_child_nodes = [str(child) for child in context.IDENTIFIER()]

        for child in context.getChildren():
            # Attach prop references
            if isinstance(child, PCParser.PropReferenceContext):
                prop = PropReference(Identifier(str(child.IDENTIFIER())))
                layer.add_child(prop)
            # Attach strings and identifiers
            child_stringified = str(child)
            if child_stringified in string_child_nodes:
                layer.add_child(child_stringified.strip('"'))
            elif child_stringified in identifier_child_nodes:
                child_layer_context = self.__fetch_LayerContext(id=child_stringified)
                self.__visit_Layer(context=child_layer_context)

    # pylint: disable=[invalid-name]
    def __fetch_LayerContext(self, id: str) -> PCParser.LayerContext:
        # Layers belonging to the active component
        layers: list[PCParser.LayerContext] = self._active_component_context.layer()
        for layer in layers:
            if id == str(layer.IDENTIFIER()):
                return layer

    # pylint: disable=[invalid-name]
    def __visit_Props(self, layer: Layer, context: PCParser.PropsContext) -> None:
        layer.props = self.__visit_Object(context.object_())

    # pylint: disable=[invalid-name]
    def __visit_Object(self, context: PCParser.ObjectContext) -> dict[str, Layer.Value]:
        obj = {}
        for pair in context.pair():
            key, value = self.__visit_Pair(pair)
            obj[key] = value
        return obj

    # pylint: disable=[invalid-name]
    def __visit_Array(self, context: PCParser.ArrayContext) -> list[Layer.Value]:
        arr = []
        for item in context.value():
            arr.append(self.__visit_Value(item))
        return arr

    # pylint: disable=[invalid-name]
    def __visit_Pair(self, context: PCParser.PairContext) -> tuple[str, Layer.Value]:
        key = str(context.STRING()).strip('"')
        value = self.__visit_Value(context.value())
        return key, value

    # pylint: disable=[invalid-name]
    def __visit_Value(self, context: PCParser.ValueContext) -> Layer.Value:
        node = context.children[0]
        if context.NULL() is not None:
            return None
        elif context.BOOLEAN() is not None:
            value_as_string = str(context.BOOLEAN())
            if value_as_string == "true":
                return True
            elif value_as_string == "false":
                return False
            return None
        elif context.NUMBER() is not None:
            num = str(context.NUMBER())
            if "." in num:
                return float(str(num))
            else:
                return int(str(num))
        elif context.STRING() is not None:
            return str(context.STRING()).strip('"')
        elif context.array() is not None:
            return self.__visit_Array(context.array())
        elif context.object_() is not None:
            return self.__visit_Object(context.object_())
        elif context.propReference() is not None:
            return self.__visit_PropReference(context.propReference())
        return str(node)

    # pylint: disable=[invalid-name]
    def __visit_PropReference(self, context: PCParser.PropReferenceContext):
        return PropReference(Identifier(str(context.IDENTIFIER())))
